### SQL Queries

#### Part 1

1. **List all albums along with the artist name:**

   ```sql
   SELECT a.id, a.title, ar.name AS artist_name
   FROM ALBUMS a
   JOIN ARTISTS ar ON a.artist_id = ar.id;
   ```

2. **Find all tracks and their album names:**

   ```sql
   SELECT t.id, t.name AS track_name, al.title AS album_title
   FROM TRACKS t
   JOIN ALBUMS al ON t.album_id = al.id;
   ```

3. **List all tracks with their genre and media type:**

   ```sql
   SELECT t.id, t.name AS track_name, g.name AS genre, mt.name AS media_type
   FROM TRACKS t
   JOIN GENRES g ON t.genre_id = g.id
   JOIN MEDIA_TYPES mt ON t.media_type_id = mt.id;
   ```

4. **Find the total number of tracks in each playlist:**

   ```sql
   SELECT p.id, p.name AS playlist_name, COUNT(pt.track_id) AS track_count
   FROM PLAYLISTS p
   JOIN PLAYLIST_TRACKS pt ON p.id = pt.playlist_id
   GROUP BY p.id, p.name;
   ```

5. **List all customers along with their support representative's name:**

   ```sql
   SELECT c.id, c.first_name, c.last_name, e.first_name AS support_rep_first_name, e.last_name AS support_rep_last_name
   FROM CUSTOMERS c
   JOIN EMPLOYEES e ON c.support_rep_id = e.id;
   ```

6. **Find the total amount spent by each customer:**

   ```sql
   SELECT c.id, c.first_name, c.last_name, SUM(i.total) AS total_spent
   FROM CUSTOMERS c
   JOIN INVOICES i ON c.id = i.customer_id
   GROUP BY c.id, c.first_name, c.last_name;
   ```

7. **List all invoices along with the customer's name and the total amount:**

   ```sql
   SELECT i.id, c.first_name, c.last_name, i.total
   FROM INVOICES i
   JOIN CUSTOMERS c ON i.customer_id = c.id;
   ```

8. **Find the most expensive track:**

   ```sql
   SELECT t.id, t.name, t.unit_price
   FROM TRACKS t
   ORDER BY t.unit_price DESC
   LIMIT 1;
   ```

9. **List all employees and their managers:**

   ```sql
   SELECT e.id, e.first_name, e.last_name, m.first_name AS manager_first_name, m.last_name AS manager_last_name
   FROM EMPLOYEES e
   LEFT JOIN EMPLOYEES m ON e.reports_to = m.id;
   ```

10. **Find the total number of tracks in each genre:**

    ```sql
    SELECT g.id, g.name AS genre_name, COUNT(t.id) AS track_count
    FROM GENRES g
    JOIN TRACKS t ON g.id = t.genre_id
    GROUP BY g.id, g.name;
    ```

#### Part 2

1. **Find the total sales for each album:**

   ```sql
   SELECT al.id, al.title, SUM(il.unit_price * il.quantity) AS total_sales
   FROM ALBUMS al
   JOIN TRACKS t ON al.id = t.album_id
   JOIN INVOICE_LINES il ON t.id = il.track_id
   GROUP BY al.id, al.title;
   ```

2. **List all customers who have never made a purchase:**

   ```sql
   SELECT c.id, c.first_name, c.last_name
   FROM CUSTOMERS c
   LEFT JOIN INVOICES i ON c.id = i.customer_id
   WHERE i.id IS NULL;
   ```

3. **Find the most popular genre by the number of tracks sold:**

   ```sql
   SELECT g.id, g.name AS genre_name, COUNT(il.track_id) AS tracks_sold
   FROM GENRES g
   JOIN TRACKS t ON g.id = t.genre_id
   JOIN INVOICE_LINES il ON t.id = il.track_id
   GROUP BY g.id, g.name
   ORDER BY tracks_sold DESC
   LIMIT 1;
   ```

4. **List all employees along with the number of customers they support:**

   ```sql
   SELECT e.id, e.first_name, e.last_name, COUNT(c.id) AS customers_supported
   FROM EMPLOYEES e
   LEFT JOIN CUSTOMERS c ON e.id = c.support_rep_id
   GROUP BY e.id, e.first_name, e.last_name;
   ```

5. **Find the average invoice total for each customer:**

   ```sql
   SELECT c.id, c.first_name, c.last_name, AVG(i.total) AS average_invoice_total
   FROM CUSTOMERS c
   JOIN INVOICES i ON c.id = i.customer_id
   GROUP BY c.id, c.first_name, c.last_name;
   ```

6. **List all tracks that are part of more than one playlist:**

   ```sql
   SELECT t.id, t.name, COUNT(pt.playlist_id) AS playlist_count
   FROM TRACKS t
   JOIN PLAYLIST_TRACKS pt ON t.id = pt.track_id
   GROUP BY t.id, t.name
   HAVING playlist_count > 1;
   ```

7. **Find the total number of tracks sold for each media type:**

   ```sql
   SELECT mt.id, mt.name AS media_type_name, SUM(il.quantity) AS tracks_sold
   FROM MEDIA_TYPES mt
   JOIN TRACKS t ON mt.id = t.media_type_id
   JOIN INVOICE_LINES il ON t.id = il.track_id
   GROUP BY mt.id, mt.name;
   ```

8. **List all albums that have tracks in more than one genre:**

   ```sql
   SELECT al.id, al.title, COUNT(DISTINCT t.genre_id) AS genre_count
   FROM ALBUMS al
   JOIN TRACKS t ON al.id = t.album_id
   GROUP BY al.id, al.title
   HAVING genre_count > 1;
   ```

9. **Find the total revenue generated by each genre:**

   ```sql
   SELECT g.id, g.name AS genre_name, SUM(il.unit_price * il.quantity) AS total_revenue
   FROM GENRES g
   JOIN TRACKS t ON g.id = t.genre_id
   JOIN INVOICE_LINES il ON t.id = il.track_id
   GROUP BY g.id, g.name;
   ```

10. **List all customers along with the total number of invoices they have:**

    ```sql
    SELECT c.id, c.first_name, c.last_name, COUNT(i.id) AS invoice_count
    FROM CUSTOMERS c
    LEFT JOIN INVOICES i ON c.id = i.customer_id
    GROUP BY c.id, c.first_name, c.last_name;
    ```

#### Part 3

1. **Find the top 5 customers who have spent the most money:**

   ```sql
   SELECT c.id, c.first_name, c.last_name, SUM(i.total) AS total_spent
   FROM CUSTOMERS c
   JOIN INVOICES i ON c.id = i.customer_id
   GROUP BY c.id, c.first_name, c.last_name
   ORDER BY total_spent DESC
   LIMIT 5;
   ```

2. **List all tracks that have never been sold:**

   ```sql
   SELECT t.id, t.name
   FROM TRACKS t
   LEFT JOIN INVOICE_LINES il ON t.id = il.track_id
   WHERE il.id IS NULL;
   ```

3. **Find the employee who supports the most customers:**

   ```sql
   SELECT e.id, e.first_name, e.last_name, COUNT(c.id) AS customer_count
   FROM EMPLOYEES e
   JOIN CUSTOMERS c ON e.id = c.support_rep_id
   GROUP BY e.id, e.first_name, e.last_name
   ORDER BY customer_count DESC
   LIMIT 1;
   ```

4. **Find the total revenue generated by each artist:**

   ```sql
   SELECT ar.id, ar.name AS artist_name, SUM(il.unit_price * il.quantity) AS total_revenue
   FROM ARTISTS ar
   JOIN ALBUMS al ON ar.id = al.artist_id
   JOIN TRACKS t ON al.id = t.album_id
   JOIN INVOICE_LINES il ON t.id = il.track_id
   GROUP BY ar.id, ar.name;
   ```

5. **List the top 3 genres by total sales revenue:**

   ```sql
   SELECT g.id, g.name AS genre_name, SUM(il.unit_price * il.quantity) AS total_revenue
   FROM GENRES g
   JOIN TRACKS t ON g.id = t.genre_id
   JOIN INVOICE_LINES il ON t.id = il.track_id
   GROUP BY g.id, g.name
   ORDER BY total_revenue DESC
   LIMIT 3;
   ```

6. **List all employees who do not have any direct reports:**

   ```sql
   SELECT e.id, e.first_name, e.last_name
   FROM EMPLOYEES e
   LEFT JOIN EMPLOYEES r ON e.id = r.reports_to
   WHERE r.id IS NULL;
   ```

7. **Find the total number of tracks sold for each album:**

   ```sql
   SELECT al.id, al.title, COUNT(il.track_id) AS tracks_sold
   FROM ALBUMS al
   JOIN TRACKS t ON al.id = t.album_id
   JOIN INVOICE_LINES il ON t.id = il.track_id
   GROUP BY al.id, al.title;
   ```

8. **Query to find the names of tracks that have a unit price higher than the average unit price of all tracks:**

   ```sql
   SELECT name
   FROM tracks
   WHERE unit_price > (
      SELECT AVG(unit_price)
      FROM tracks
   );
   ```

9. **Query to find the names of employees who earn more than the average salary:**

   ```sql
   SELECT first_name, last_name
   FROM employees e1
   WHERE salary > (
      SELECT AVG(salary)
      FROM employees e2
   );
   ```

10. **Find the names of customers along with the titles of albums they have purchased:**

```sql
SELECT c.first_name, c.last_name, a.title
FROM customers c
JOIN invoices i ON c.id = i.customer_id
JOIN invoice_lines il ON i.id = il.invoice_id
JOIN tracks t ON il.track_id = t.id
JOIN albums a ON t.album_id = a.id;
```
